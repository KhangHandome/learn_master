
i2c_ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000388  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800049c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004a0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004a0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ed6  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000055d  00000000  00000000  00020f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  000214a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000167  00000000  00000000  000216a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001034a  00000000  00000000  00021807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002108  00000000  00000000  00031b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b2df  00000000  00000000  00033c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000062c  00000000  00000000  000aef38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000af564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800047c 	.word	0x0800047c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800047c 	.word	0x0800047c

0800014c <main>:
static uint8_t HAL_IP_I2C_GetTxFlag(void);
static void LED_Init(void);
static void LED_Toggle(void);

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
    Status_t status = HAL_OK;
 8000152:	2301      	movs	r3, #1
 8000154:	75fb      	strb	r3, [r7, #23]
    uint8_t data_rx[20];

    /* Enable GPIO ports */
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000156:	4b13      	ldr	r3, [pc, #76]	; (80001a4 <main+0x58>)
 8000158:	699b      	ldr	r3, [r3, #24]
 800015a:	4a12      	ldr	r2, [pc, #72]	; (80001a4 <main+0x58>)
 800015c:	f043 0304 	orr.w	r3, r3, #4
 8000160:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <main+0x58>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <main+0x58>)
 8000168:	f043 0308 	orr.w	r3, r3, #8
 800016c:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <main+0x58>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	4a0c      	ldr	r2, [pc, #48]	; (80001a4 <main+0x58>)
 8000174:	f043 0310 	orr.w	r3, r3, #16
 8000178:	6193      	str	r3, [r2, #24]

    LED_Init();
 800017a:	f000 f8d3 	bl	8000324 <LED_Init>
    HAL_IP_I2C_Init(CLOCK_SPEED,FREQ);
 800017e:	2108      	movs	r1, #8
 8000180:	f242 7010 	movw	r0, #10000	; 0x2710
 8000184:	f000 f810 	bl	80001a8 <HAL_IP_I2C_Init>

    while (1)
    {
        /* Slave Receive Example */
        status = HAL_IP_I2C_Receive(data_rx, 14);
 8000188:	463b      	mov	r3, r7
 800018a:	210e      	movs	r1, #14
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f867 	bl	8000260 <HAL_IP_I2C_Receive>
 8000192:	4603      	mov	r3, r0
 8000194:	75fb      	strb	r3, [r7, #23]
        if (status == HAL_OK)
 8000196:	7dfb      	ldrb	r3, [r7, #23]
 8000198:	2b01      	cmp	r3, #1
 800019a:	d1f5      	bne.n	8000188 <main+0x3c>
        {
            LED_Toggle();
 800019c:	f000 f8d6 	bl	800034c <LED_Toggle>
        status = HAL_IP_I2C_Receive(data_rx, 14);
 80001a0:	e7f2      	b.n	8000188 <main+0x3c>
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000

080001a8 <HAL_IP_I2C_Init>:
    }
}

/* ---------------- I2C Init ---------------- */
static void HAL_IP_I2C_Init(uint16_t clock_speed,uint16_t freq_mhz)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	460a      	mov	r2, r1
 80001b2:	80fb      	strh	r3, [r7, #6]
 80001b4:	4613      	mov	r3, r2
 80001b6:	80bb      	strh	r3, [r7, #4]
    /* Enable clock for I2C1 */
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80001b8:	4b25      	ldr	r3, [pc, #148]	; (8000250 <HAL_IP_I2C_Init+0xa8>)
 80001ba:	69db      	ldr	r3, [r3, #28]
 80001bc:	4a24      	ldr	r2, [pc, #144]	; (8000250 <HAL_IP_I2C_Init+0xa8>)
 80001be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001c2:	61d3      	str	r3, [r2, #28]

    /* Configure PB6 (SCL), PB7 (SDA) as AF open-drain */
    GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 80001c4:	4b23      	ldr	r3, [pc, #140]	; (8000254 <HAL_IP_I2C_Init+0xac>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a22      	ldr	r2, [pc, #136]	; (8000254 <HAL_IP_I2C_Init+0xac>)
 80001ca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80001ce:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 80001d0:	4b20      	ldr	r3, [pc, #128]	; (8000254 <HAL_IP_I2C_Init+0xac>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a1f      	ldr	r2, [pc, #124]	; (8000254 <HAL_IP_I2C_Init+0xac>)
 80001d6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80001da:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <HAL_IP_I2C_Init+0xac>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a1c      	ldr	r2, [pc, #112]	; (8000254 <HAL_IP_I2C_Init+0xac>)
 80001e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80001e6:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 80001e8:	4b1a      	ldr	r3, [pc, #104]	; (8000254 <HAL_IP_I2C_Init+0xac>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a19      	ldr	r2, [pc, #100]	; (8000254 <HAL_IP_I2C_Init+0xac>)
 80001ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80001f2:	6013      	str	r3, [r2, #0]

    /* Reset I2C1 */
    I2C1->CR1 |= I2C_CR1_SWRST;
 80001f4:	4b18      	ldr	r3, [pc, #96]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a17      	ldr	r2, [pc, #92]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 80001fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001fe:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000200:	4b15      	ldr	r3, [pc, #84]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a14      	ldr	r2, [pc, #80]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 8000206:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800020a:	6013      	str	r3, [r2, #0]

    /* Setup Clock for I2C */
    I2C1->CR2 = freq_mhz;              // Peripheral clock frequency
 800020c:	4a12      	ldr	r2, [pc, #72]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 800020e:	88bb      	ldrh	r3, [r7, #4]
 8000210:	6053      	str	r3, [r2, #4]
    I2C1->TRISE = freq_mhz + 1;        // TRISE
 8000212:	88bb      	ldrh	r3, [r7, #4]
 8000214:	1c5a      	adds	r2, r3, #1
 8000216:	4b10      	ldr	r3, [pc, #64]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 8000218:	621a      	str	r2, [r3, #32]
    I2C1->CCR = (freq_mhz * 1000000) / (2 * clock_speed);
 800021a:	88bb      	ldrh	r3, [r7, #4]
 800021c:	4a0f      	ldr	r2, [pc, #60]	; (800025c <HAL_IP_I2C_Init+0xb4>)
 800021e:	fb03 f202 	mul.w	r2, r3, r2
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	fb92 f2f3 	sdiv	r2, r2, r3
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 800022c:	61da      	str	r2, [r3, #28]

    /* Configure own slave address */
    I2C1->OAR1 = (STM32_SLAVE_ADDRESS << 1);
 800022e:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 8000230:	2240      	movs	r2, #64	; 0x40
 8000232:	609a      	str	r2, [r3, #8]

    /* Enable I2C and ACK */
    I2C1->CR1 |= I2C_CR1_PE | I2C_CR1_ACK;
 8000234:	4b08      	ldr	r3, [pc, #32]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a07      	ldr	r2, [pc, #28]	; (8000258 <HAL_IP_I2C_Init+0xb0>)
 800023a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40021000 	.word	0x40021000
 8000254:	40010c00 	.word	0x40010c00
 8000258:	40005400 	.word	0x40005400
 800025c:	000f4240 	.word	0x000f4240

08000260 <HAL_IP_I2C_Receive>:

/* ---------------- Slave Receiver ---------------- */
static Status_t HAL_IP_I2C_Receive(uint8_t *pData, uint8_t size)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	70fb      	strb	r3, [r7, #3]
    Status_t retVal = HAL_N_OK;
 800026c:	2300      	movs	r3, #0
 800026e:	73bb      	strb	r3, [r7, #14]
    uint8_t counter = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	73fb      	strb	r3, [r7, #15]

    I2C1->CR1 |= I2C_CR1_ACK;   // Enable ACK
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a22      	ldr	r2, [pc, #136]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 800027a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800027e:	6013      	str	r3, [r2, #0]

    /* EV1: Wait for address match */
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000280:	bf00      	nop
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f003 0302 	and.w	r3, r3, #2
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f9      	beq.n	8000282 <HAL_IP_I2C_Receive+0x22>
    (void)I2C1->SR1;
 800028e:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 8000290:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000292:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 8000294:	699b      	ldr	r3, [r3, #24]

    /* EV2: Receive data */
    for (counter = 0; counter < size; counter++)
 8000296:	2300      	movs	r3, #0
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e01a      	b.n	80002d2 <HAL_IP_I2C_Receive+0x72>
    {
        while (!HAL_IP_I2C_GetRxFlag()); // Wait RXNE=1
 800029c:	bf00      	nop
 800029e:	f000 f833 	bl	8000308 <HAL_IP_I2C_GetRxFlag>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d0fa      	beq.n	800029e <HAL_IP_I2C_Receive+0x3e>
        pData[counter] = I2C1->DR;
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 80002aa:	6919      	ldr	r1, [r3, #16]
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4413      	add	r3, r2
 80002b2:	b2ca      	uxtb	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]

        if (counter == (size - 1))
 80002b6:	7bfa      	ldrb	r2, [r7, #15]
 80002b8:	78fb      	ldrb	r3, [r7, #3]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	429a      	cmp	r2, r3
 80002be:	d105      	bne.n	80002cc <HAL_IP_I2C_Receive+0x6c>
        {
            I2C1->CR1 &= (~I2C_CR1_ACK_Msk); // Send NACK for last byte
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0f      	ldr	r2, [pc, #60]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 80002c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002ca:	6013      	str	r3, [r2, #0]
    for (counter = 0; counter < size; counter++)
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	3301      	adds	r3, #1
 80002d0:	73fb      	strb	r3, [r7, #15]
 80002d2:	7bfa      	ldrb	r2, [r7, #15]
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d3e0      	bcc.n	800029c <HAL_IP_I2C_Receive+0x3c>
        }
    }
    retVal = HAL_OK;
 80002da:	2301      	movs	r3, #1
 80002dc:	73bb      	strb	r3, [r7, #14]

    /* EV4: Wait for STOP */
    while (!(I2C1->SR1 & I2C_SR1_STOPF));
 80002de:	bf00      	nop
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	f003 0310 	and.w	r3, r3, #16
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d0f9      	beq.n	80002e0 <HAL_IP_I2C_Receive+0x80>
    (void)I2C1->SR1;
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 80002ee:	695b      	ldr	r3, [r3, #20]
    I2C1->CR1 |= 0;
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 80002f2:	4a04      	ldr	r2, [pc, #16]	; (8000304 <HAL_IP_I2C_Receive+0xa4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	6013      	str	r3, [r2, #0]

    return retVal;
 80002f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40005400 	.word	0x40005400

08000308 <HAL_IP_I2C_GetRxFlag>:
{
    return (I2C1->SR1 & I2C_SR1_TXE);
}

static uint8_t HAL_IP_I2C_GetRxFlag(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    return (I2C1->SR1 & I2C_SR1_RXNE);
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <HAL_IP_I2C_GetRxFlag+0x18>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000316:	b2db      	uxtb	r3, r3
}
 8000318:	4618      	mov	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40005400 	.word	0x40005400

08000324 <LED_Init>:

/* ---------------- LED ---------------- */
static void LED_Init(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
    GPIOC->CRH &= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <LED_Init+0x24>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a06      	ldr	r2, [pc, #24]	; (8000348 <LED_Init+0x24>)
 800032e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000332:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13_0;  // Output mode 10MHz
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <LED_Init+0x24>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a03      	ldr	r2, [pc, #12]	; (8000348 <LED_Init+0x24>)
 800033a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800033e:	6053      	str	r3, [r2, #4]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40011000 	.word	0x40011000

0800034c <LED_Toggle>:

static void LED_Toggle(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    GPIOC->ODR ^= GPIO_ODR_ODR13;
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <LED_Toggle+0x18>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LED_Toggle+0x18>)
 8000356:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800035a:	60d3      	str	r3, [r2, #12]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40011000 	.word	0x40011000

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800036c:	e7fe      	b.n	800036c <NMI_Handler+0x4>

0800036e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <MemManage_Handler+0x4>

0800037a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <UsageFault_Handler+0x4>

08000386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr

08000392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ae:	f000 f82f 	bl	8000410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003c4:	f7ff fff7 	bl	80003b6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003ca:	490c      	ldr	r1, [pc, #48]	; (80003fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003cc:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a09      	ldr	r2, [pc, #36]	; (8000404 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003e0:	4c09      	ldr	r4, [pc, #36]	; (8000408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003ee:	f000 f821 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff feab 	bl	800014c <main>
  bx lr
 80003f6:	4770      	bx	lr
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000400:	0800049c 	.word	0x0800049c
  ldr r2, =_sbss
 8000404:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000408:	20000024 	.word	0x20000024

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <HAL_IncTick+0x1c>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_IncTick+0x20>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4413      	add	r3, r2
 8000420:	4a03      	ldr	r2, [pc, #12]	; (8000430 <HAL_IncTick+0x20>)
 8000422:	6013      	str	r3, [r2, #0]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	20000000 	.word	0x20000000
 8000430:	20000020 	.word	0x20000020

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	2600      	movs	r6, #0
 8000438:	4d0c      	ldr	r5, [pc, #48]	; (800046c <__libc_init_array+0x38>)
 800043a:	4c0d      	ldr	r4, [pc, #52]	; (8000470 <__libc_init_array+0x3c>)
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	42a6      	cmp	r6, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	f000 f81a 	bl	800047c <_init>
 8000448:	2600      	movs	r6, #0
 800044a:	4d0a      	ldr	r5, [pc, #40]	; (8000474 <__libc_init_array+0x40>)
 800044c:	4c0a      	ldr	r4, [pc, #40]	; (8000478 <__libc_init_array+0x44>)
 800044e:	1b64      	subs	r4, r4, r5
 8000450:	10a4      	asrs	r4, r4, #2
 8000452:	42a6      	cmp	r6, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	3601      	adds	r6, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f855 3b04 	ldr.w	r3, [r5], #4
 8000466:	4798      	blx	r3
 8000468:	3601      	adds	r6, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	08000494 	.word	0x08000494
 8000470:	08000494 	.word	0x08000494
 8000474:	08000494 	.word	0x08000494
 8000478:	08000498 	.word	0x08000498

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
