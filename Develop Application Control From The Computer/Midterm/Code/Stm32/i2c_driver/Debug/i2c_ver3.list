
i2c_ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000048c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000598  08000598  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000598  08000598  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000598  08000598  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000598  08000598  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000598  08000598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005a0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  080005a4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080005a4  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001522  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000786  00000000  00000000  00021592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000238  00000000  00000000  00021d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000193  00000000  00000000  00021f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010419  00000000  00000000  000220e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000277a  00000000  00000000  000324fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b447  00000000  00000000  00034c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006e8  00000000  00000000  000b00c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  000b07a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000580 	.word	0x08000580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000580 	.word	0x08000580

0800014c <main>:

static void LED_Init(void);
static void LED_Toggle(void);

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
    Status_t status = HAL_OK;
 8000152:	2301      	movs	r3, #1
 8000154:	75fb      	strb	r3, [r7, #23]
    uint8_t data_rx[20];

    /* Enable GPIO ports */
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000156:	4b14      	ldr	r3, [pc, #80]	; (80001a8 <main+0x5c>)
 8000158:	699b      	ldr	r3, [r3, #24]
 800015a:	4a13      	ldr	r2, [pc, #76]	; (80001a8 <main+0x5c>)
 800015c:	f043 0304 	orr.w	r3, r3, #4
 8000160:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000162:	4b11      	ldr	r3, [pc, #68]	; (80001a8 <main+0x5c>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	4a10      	ldr	r2, [pc, #64]	; (80001a8 <main+0x5c>)
 8000168:	f043 0308 	orr.w	r3, r3, #8
 800016c:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800016e:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <main+0x5c>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	4a0d      	ldr	r2, [pc, #52]	; (80001a8 <main+0x5c>)
 8000174:	f043 0310 	orr.w	r3, r3, #16
 8000178:	6193      	str	r3, [r2, #24]

    LED_Init();
 800017a:	f000 f819 	bl	80001b0 <LED_Init>
    HAL_IP_I2C_Init(100000,FREQ);
 800017e:	2108      	movs	r1, #8
 8000180:	480a      	ldr	r0, [pc, #40]	; (80001ac <main+0x60>)
 8000182:	f000 f8b9 	bl	80002f8 <HAL_IP_I2C_Init>
    HAL_IP_I2C_EnableISR();
 8000186:	f000 f911 	bl	80003ac <HAL_IP_I2C_EnableISR>
    HAL_IP_I2C_Slave_Receive_IT(data_rx,10, &status );
 800018a:	f107 0217 	add.w	r2, r7, #23
 800018e:	463b      	mov	r3, r7
 8000190:	210a      	movs	r1, #10
 8000192:	4618      	mov	r0, r3
 8000194:	f000 f930 	bl	80003f8 <HAL_IP_I2C_Slave_Receive_IT>
    while (1)
    {
        /* Slave Receive Example */
/*        status = HAL_IP_I2C_Receive(data_rx, 14); */
        if (status == HAL_OK)
 8000198:	7dfb      	ldrb	r3, [r7, #23]
 800019a:	2b01      	cmp	r3, #1
 800019c:	d1fc      	bne.n	8000198 <main+0x4c>
        {
            LED_Toggle();
 800019e:	f000 f81b 	bl	80001d8 <LED_Toggle>
            status = HAL_N_OK;
 80001a2:	2300      	movs	r3, #0
 80001a4:	75fb      	strb	r3, [r7, #23]
        if (status == HAL_OK)
 80001a6:	e7f7      	b.n	8000198 <main+0x4c>
 80001a8:	40021000 	.word	0x40021000
 80001ac:	000186a0 	.word	0x000186a0

080001b0 <LED_Init>:
    }
}

/* ---------------- LED ---------------- */
static void LED_Init(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
    GPIOC->CRH &= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);
 80001b4:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <LED_Init+0x24>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <LED_Init+0x24>)
 80001ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001be:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13_0;  // Output mode 10MHz
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <LED_Init+0x24>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a03      	ldr	r2, [pc, #12]	; (80001d4 <LED_Init+0x24>)
 80001c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001ca:	6053      	str	r3, [r2, #4]
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	40011000 	.word	0x40011000

080001d8 <LED_Toggle>:

static void LED_Toggle(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    GPIOC->ODR ^= GPIO_ODR_ODR13;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <LED_Toggle+0x18>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <LED_Toggle+0x18>)
 80001e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001e6:	60d3      	str	r3, [r2, #12]
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40011000 	.word	0x40011000

080001f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80001f8:	e7fe      	b.n	80001f8 <NMI_Handler+0x4>

080001fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001fa:	b480      	push	{r7}
 80001fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001fe:	e7fe      	b.n	80001fe <HardFault_Handler+0x4>

08000200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000204:	e7fe      	b.n	8000204 <MemManage_Handler+0x4>

08000206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000206:	b480      	push	{r7}
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800020a:	e7fe      	b.n	800020a <BusFault_Handler+0x4>

0800020c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000210:	e7fe      	b.n	8000210 <UsageFault_Handler+0x4>

08000212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000212:	b480      	push	{r7}
 8000214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr

0800021e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800021e:	b480      	push	{r7}
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800022a:	b480      	push	{r7}
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800022e:	bf00      	nop
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000236:	b580      	push	{r7, lr}
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800023a:	f000 f82f 	bl	800029c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}

08000242 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000242:	b480      	push	{r7}
 8000244:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000246:	bf00      	nop
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
	...

08000250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000250:	f7ff fff7 	bl	8000242 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000254:	480b      	ldr	r0, [pc, #44]	; (8000284 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000258:	4a0c      	ldr	r2, [pc, #48]	; (800028c <LoopFillZerobss+0x16>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800025c:	e002      	b.n	8000264 <LoopCopyDataInit>

0800025e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000262:	3304      	adds	r3, #4

08000264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000268:	d3f9      	bcc.n	800025e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026a:	4a09      	ldr	r2, [pc, #36]	; (8000290 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800026c:	4c09      	ldr	r4, [pc, #36]	; (8000294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000270:	e001      	b.n	8000276 <LoopFillZerobss>

08000272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000274:	3204      	adds	r2, #4

08000276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000278:	d3fb      	bcc.n	8000272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800027a:	f000 f95d 	bl	8000538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027e:	f7ff ff65 	bl	800014c <main>
  bx lr
 8000282:	4770      	bx	lr
  ldr r0, =_sdata
 8000284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000288:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800028c:	080005a0 	.word	0x080005a0
  ldr r2, =_sbss
 8000290:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000294:	20000030 	.word	0x20000030

08000298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000298:	e7fe      	b.n	8000298 <ADC1_2_IRQHandler>
	...

0800029c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <HAL_IncTick+0x1c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <HAL_IncTick+0x20>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4413      	add	r3, r2
 80002ac:	4a03      	ldr	r2, [pc, #12]	; (80002bc <HAL_IncTick+0x20>)
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	20000000 	.word	0x20000000
 80002bc:	20000020 	.word	0x20000020

080002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db0b      	blt.n	80002ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	4906      	ldr	r1, [pc, #24]	; (80002f4 <__NVIC_EnableIRQ+0x34>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <HAL_IP_I2C_Init>:
  * @details Configures PB6 (SCL) and PB7 (SDA) as AF open-drain,
  *          sets timing registers (CR2, CCR, TRISE),
  *          assigns own slave address, enables ACK and I2C1.
  */
void HAL_IP_I2C_Init(uint32_t clock_speed,uint16_t freq_mhz)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	807b      	strh	r3, [r7, #2]
    /* Enable clock for I2C1 */
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <HAL_IP_I2C_Init+0xa4>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <HAL_IP_I2C_Init+0xa4>)
 800030a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800030e:	61d3      	str	r3, [r2, #28]

    /* Configure PB6 (SCL), PB7 (SDA) as AF open-drain */
    GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <HAL_IP_I2C_Init+0xa8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a22      	ldr	r2, [pc, #136]	; (80003a0 <HAL_IP_I2C_Init+0xa8>)
 8000316:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800031a:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <HAL_IP_I2C_Init+0xa8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a1f      	ldr	r2, [pc, #124]	; (80003a0 <HAL_IP_I2C_Init+0xa8>)
 8000322:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000326:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <HAL_IP_I2C_Init+0xa8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <HAL_IP_I2C_Init+0xa8>)
 800032e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000332:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <HAL_IP_I2C_Init+0xa8>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <HAL_IP_I2C_Init+0xa8>)
 800033a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800033e:	6013      	str	r3, [r2, #0]

    /* Reset I2C1 */
    I2C1->CR1 |= I2C_CR1_SWRST;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a17      	ldr	r2, [pc, #92]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 8000346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800034a:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 8000352:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000356:	6013      	str	r3, [r2, #0]

    /* Setup Clock for I2C */
    I2C1->CR2 = freq_mhz;              // Peripheral clock frequency
 8000358:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 800035a:	887b      	ldrh	r3, [r7, #2]
 800035c:	6053      	str	r3, [r2, #4]
    I2C1->TRISE = freq_mhz + 1;        // TRISE
 800035e:	887b      	ldrh	r3, [r7, #2]
 8000360:	1c5a      	adds	r2, r3, #1
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 8000364:	621a      	str	r2, [r3, #32]
    I2C1->CCR = (freq_mhz * 1000000) / (2 * clock_speed);
 8000366:	887b      	ldrh	r3, [r7, #2]
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <HAL_IP_I2C_Init+0xb0>)
 800036a:	fb02 f303 	mul.w	r3, r2, r3
 800036e:	4619      	mov	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 8000376:	fbb1 f3f3 	udiv	r3, r1, r3
 800037a:	61d3      	str	r3, [r2, #28]

    /* Configure own slave address */
    I2C1->OAR1 = (STM32_SLAVE_ADDRESS << 1);
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 800037e:	2240      	movs	r2, #64	; 0x40
 8000380:	609a      	str	r2, [r3, #8]

    /* Enable I2C and ACK */
    I2C1->CR1 |= I2C_CR1_PE | I2C_CR1_ACK;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <HAL_IP_I2C_Init+0xac>)
 8000388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	40005400 	.word	0x40005400
 80003a8:	000f4240 	.word	0x000f4240

080003ac <HAL_IP_I2C_EnableISR>:
/**
  * @brief  Initialize I2C1 peripheral With Interrupt.
  * @details Enable NVIC
  */
void HAL_IP_I2C_EnableISR(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	/*
	 * Disable module i2c
	 */
	I2C1->CR1 &= (~I2C_CR1_PE_Msk);
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <HAL_IP_I2C_EnableISR+0x48>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <HAL_IP_I2C_EnableISR+0x48>)
 80003b6:	f023 0301 	bic.w	r3, r3, #1
 80003ba:	6013      	str	r3, [r2, #0]
	/*
	 * Enable NIVC
	 */
	NVIC_EnableIRQ(I2C1_ER_IRQn);
 80003bc:	2020      	movs	r0, #32
 80003be:	f7ff ff7f 	bl	80002c0 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(I2C1_EV_IRQn);
 80003c2:	201f      	movs	r0, #31
 80003c4:	f7ff ff7c 	bl	80002c0 <__NVIC_EnableIRQ>
		– STOPF = 1 (Slave)
		– BTF = 1 with no TxE or RxNE event
		– TxE event to 1 if ITBUFEN = 1
		– RxNE event to 1if ITBUFEN = 1
	 */
	I2C1->CR2 |= (I2C_CR2_ITBUFEN);
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <HAL_IP_I2C_EnableISR+0x48>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4a09      	ldr	r2, [pc, #36]	; (80003f4 <HAL_IP_I2C_EnableISR+0x48>)
 80003ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003d2:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= (I2C_CR2_ITEVTEN);
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <HAL_IP_I2C_EnableISR+0x48>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	4a06      	ldr	r2, [pc, #24]	; (80003f4 <HAL_IP_I2C_EnableISR+0x48>)
 80003da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003de:	6053      	str	r3, [r2, #4]
    /* Enable I2C and ACK */
    I2C1->CR1 |= I2C_CR1_PE | I2C_CR1_ACK;
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <HAL_IP_I2C_EnableISR+0x48>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a03      	ldr	r2, [pc, #12]	; (80003f4 <HAL_IP_I2C_EnableISR+0x48>)
 80003e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	6013      	str	r3, [r2, #0]

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40005400 	.word	0x40005400

080003f8 <HAL_IP_I2C_Slave_Receive_IT>:
  *          reads incoming bytes (EV2),
  *          sends NACK for last byte,
  *          waits for STOP condition (EV4).
  */
Status_t HAL_IP_I2C_Slave_Receive_IT(uint8_t *pData,uint8_t size, Status_t *status )
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	460b      	mov	r3, r1
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	72fb      	strb	r3, [r7, #11]
    g_pRxData = pData;
 8000406:	4a0c      	ldr	r2, [pc, #48]	; (8000438 <HAL_IP_I2C_Slave_Receive_IT+0x40>)
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	6013      	str	r3, [r2, #0]
    g_rxSize  = size;
 800040c:	4a0b      	ldr	r2, [pc, #44]	; (800043c <HAL_IP_I2C_Slave_Receive_IT+0x44>)
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	7013      	strb	r3, [r2, #0]
    g_rxCount = 0;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <HAL_IP_I2C_Slave_Receive_IT+0x48>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
    g_status  = status;
 8000418:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <HAL_IP_I2C_Slave_Receive_IT+0x4c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6013      	str	r3, [r2, #0]

    /* Enable ACK */
    I2C1->CR1 |= I2C_CR1_ACK;
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_IP_I2C_Slave_Receive_IT+0x50>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <HAL_IP_I2C_Slave_Receive_IT+0x50>)
 8000424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000428:	6013      	str	r3, [r2, #0]

    return 0;
 800042a:	2300      	movs	r3, #0
}
 800042c:	4618      	mov	r0, r3
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000024 	.word	0x20000024
 800043c:	2000002c 	.word	0x2000002c
 8000440:	2000002d 	.word	0x2000002d
 8000444:	20000028 	.word	0x20000028
 8000448:	40005400 	.word	0x40005400

0800044c <I2C1_EV_IRQHandler>:
static uint8_t HAL_IP_I2C_GetRxFlag(void)
{
    return (I2C1->SR1 & I2C_SR1_RXNE);
}
void I2C1_EV_IRQHandler()
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
	uint32_t sr1 = I2C1->SR1;
 8000452:	4b32      	ldr	r3, [pc, #200]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	60fb      	str	r3, [r7, #12]

	/* EV1: Address matched */
	if (sr1 & I2C_SR1_ADDR)
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	2b00      	cmp	r3, #0
 8000460:	d004      	beq.n	800046c <I2C1_EV_IRQHandler+0x20>
	{
		volatile uint32_t temp = I2C1->SR2; /* Clear ADDR flag */
 8000462:	4b2e      	ldr	r3, [pc, #184]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	607b      	str	r3, [r7, #4]
		(void)temp;
 8000468:	687b      	ldr	r3, [r7, #4]
		}

        g_rxCount = 0;
        I2C1->CR1 |= I2C_CR1_ACK; /* Luôn ACK cho phiên tiếp theo */
	}
}
 800046a:	e052      	b.n	8000512 <I2C1_EV_IRQHandler+0xc6>
	else if (sr1 & I2C_SR1_RXNE)
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000472:	2b00      	cmp	r3, #0
 8000474:	d020      	beq.n	80004b8 <I2C1_EV_IRQHandler+0x6c>
		uint8_t data = (uint8_t)I2C1->DR;
 8000476:	4b29      	ldr	r3, [pc, #164]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 8000478:	691b      	ldr	r3, [r3, #16]
 800047a:	72fb      	strb	r3, [r7, #11]
		if (g_rxCount < g_rxSize)
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <I2C1_EV_IRQHandler+0xd4>)
 800047e:	781a      	ldrb	r2, [r3, #0]
 8000480:	4b28      	ldr	r3, [pc, #160]	; (8000524 <I2C1_EV_IRQHandler+0xd8>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	429a      	cmp	r2, r3
 8000486:	d244      	bcs.n	8000512 <I2C1_EV_IRQHandler+0xc6>
			g_pRxData[g_rxCount++] = data;
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <I2C1_EV_IRQHandler+0xdc>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b24      	ldr	r3, [pc, #144]	; (8000520 <I2C1_EV_IRQHandler+0xd4>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	1c59      	adds	r1, r3, #1
 8000492:	b2c8      	uxtb	r0, r1
 8000494:	4922      	ldr	r1, [pc, #136]	; (8000520 <I2C1_EV_IRQHandler+0xd4>)
 8000496:	7008      	strb	r0, [r1, #0]
 8000498:	4413      	add	r3, r2
 800049a:	7afa      	ldrb	r2, [r7, #11]
 800049c:	701a      	strb	r2, [r3, #0]
			if (g_rxCount == g_rxSize)
 800049e:	4b20      	ldr	r3, [pc, #128]	; (8000520 <I2C1_EV_IRQHandler+0xd4>)
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <I2C1_EV_IRQHandler+0xd8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d133      	bne.n	8000512 <I2C1_EV_IRQHandler+0xc6>
				I2C1->CR1 &= ~I2C_CR1_ACK;  /* Gửi NACK cho byte kế */
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a1b      	ldr	r2, [pc, #108]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 80004b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004b4:	6013      	str	r3, [r2, #0]
}
 80004b6:	e02c      	b.n	8000512 <I2C1_EV_IRQHandler+0xc6>
	else if (sr1 & I2C_SR1_STOPF)
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f003 0310 	and.w	r3, r3, #16
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d027      	beq.n	8000512 <I2C1_EV_IRQHandler+0xc6>
		volatile uint32_t temp = I2C1->SR1;
 80004c2:	4b16      	ldr	r3, [pc, #88]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	603b      	str	r3, [r7, #0]
		(void)temp;
 80004c8:	683b      	ldr	r3, [r7, #0]
		I2C1->CR1 |= I2C_CR1_PE;
 80004ca:	4b14      	ldr	r3, [pc, #80]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a13      	ldr	r2, [pc, #76]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6013      	str	r3, [r2, #0]
		I2C1->CR1 &= ~I2C_CR1_ACK;
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a10      	ldr	r2, [pc, #64]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 80004dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004e0:	6013      	str	r3, [r2, #0]
		if (g_rxCount == g_rxSize)
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <I2C1_EV_IRQHandler+0xd4>)
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <I2C1_EV_IRQHandler+0xd8>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d104      	bne.n	80004f8 <I2C1_EV_IRQHandler+0xac>
			*g_status = HAL_OK;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <I2C1_EV_IRQHandler+0xe0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	e003      	b.n	8000500 <I2C1_EV_IRQHandler+0xb4>
			*g_status = HAL_N_OK;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <I2C1_EV_IRQHandler+0xe0>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
        g_rxCount = 0;
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <I2C1_EV_IRQHandler+0xd4>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
        I2C1->CR1 |= I2C_CR1_ACK; /* Luôn ACK cho phiên tiếp theo */
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a04      	ldr	r2, [pc, #16]	; (800051c <I2C1_EV_IRQHandler+0xd0>)
 800050c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000510:	6013      	str	r3, [r2, #0]
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40005400 	.word	0x40005400
 8000520:	2000002d 	.word	0x2000002d
 8000524:	2000002c 	.word	0x2000002c
 8000528:	20000024 	.word	0x20000024
 800052c:	20000028 	.word	0x20000028

08000530 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler()
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	while(1)
 8000534:	e7fe      	b.n	8000534 <I2C1_ER_IRQHandler+0x4>
	...

08000538 <__libc_init_array>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	2600      	movs	r6, #0
 800053c:	4d0c      	ldr	r5, [pc, #48]	; (8000570 <__libc_init_array+0x38>)
 800053e:	4c0d      	ldr	r4, [pc, #52]	; (8000574 <__libc_init_array+0x3c>)
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	10a4      	asrs	r4, r4, #2
 8000544:	42a6      	cmp	r6, r4
 8000546:	d109      	bne.n	800055c <__libc_init_array+0x24>
 8000548:	f000 f81a 	bl	8000580 <_init>
 800054c:	2600      	movs	r6, #0
 800054e:	4d0a      	ldr	r5, [pc, #40]	; (8000578 <__libc_init_array+0x40>)
 8000550:	4c0a      	ldr	r4, [pc, #40]	; (800057c <__libc_init_array+0x44>)
 8000552:	1b64      	subs	r4, r4, r5
 8000554:	10a4      	asrs	r4, r4, #2
 8000556:	42a6      	cmp	r6, r4
 8000558:	d105      	bne.n	8000566 <__libc_init_array+0x2e>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000560:	4798      	blx	r3
 8000562:	3601      	adds	r6, #1
 8000564:	e7ee      	b.n	8000544 <__libc_init_array+0xc>
 8000566:	f855 3b04 	ldr.w	r3, [r5], #4
 800056a:	4798      	blx	r3
 800056c:	3601      	adds	r6, #1
 800056e:	e7f2      	b.n	8000556 <__libc_init_array+0x1e>
 8000570:	08000598 	.word	0x08000598
 8000574:	08000598 	.word	0x08000598
 8000578:	08000598 	.word	0x08000598
 800057c:	0800059c 	.word	0x0800059c

08000580 <_init>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	bf00      	nop
 8000584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000586:	bc08      	pop	{r3}
 8000588:	469e      	mov	lr, r3
 800058a:	4770      	bx	lr

0800058c <_fini>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr
